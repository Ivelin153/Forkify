# Angular Microfrontend Architecture with Native Federation

This repository demonstrates how to set up an Angular 19 microfrontend (MFE) architecture using `@angular-architects/native-federation`. It includes:

* A monorepo workspace with one host app and multiple remotes.
* Shared dependencies via Module Federation (Angular Native Federation plugin).
* Standalone component APIs and NgRx state management.
* ESLint configuration enforcing community-aligned best practices.

---

## Prerequisites

Before you begin, ensure you have installed:

* Node.js (≥18.x) and npm
* Angular CLI 19 globally:

  ```bash
  npm install -g @angular/cli@19
  ```
* ESLint and related plugins (added later via `npm install -D`)

---

## 1. Create the Workspace

1. Initialize a blank Angular workspace without an initial app:

   ```bash
   ng new angular-mfe \
     --create-application=false \
     --strict \
     --package-manager=npm \
     --eslint
   cd angular-mfe
   ```
2. This creates a monorepo-friendly structure:

   ```text
   angular-mfe/
   ├─ projects/
   ├─ angular.json
   ├─ package.json
   └─ eslint.config.js
   ```

---

## 2. Generate Host and Remote Applications

Use the Angular CLI to scaffold two standalone apps—host and remote—each with routing and strict mode:

```bash
ng generate application host \
  --standalone \
  --routing \
  --prefix=app-host \
  --strict

ng generate application remote \
  --standalone \
  --routing \
  --prefix=app-remote \
  --strict
```

This creates:

```
projects/
├─ host/
└─ remote/
```

---

## 3. Install and Configure Native Federation

Install the plugin:

```bash
npm install -D @angular-architects/native-federation
```

### Configure the remote

```bash
ng add @angular-architects/native-federation \
  --project remote \
  --type remote \
  --port 4201 \
  --remoteName remote
```

### Configure the host

```bash
ng add @angular-architects/native-federation \
  --project host \
  --type dynamic-host \
  --port 4200 \
  --remotes remote:http://localhost:4201/remoteEntry.json
```

These commands generate federation.config.js in each app and update build targets.

---

## 4. Manual NgRx Integration

The automatic `ng add @ngrx/store` schematic does not support standalone apps, so add NgRx manually:

1. Install NgRx packages:

   ```bash
   npm install @ngrx/store @ngrx/effects @ngrx/store-devtools @ngrx/router-store @ngrx/entity
   ```
2. In each app’s `src/app/state/`, create:

   * `app.actions.ts`
   * `app.reducer.ts`
   * `app.effects.ts` (optional)
3. Wire into `projects/host/src/main.ts` (or `bootstrap.ts`):

   ```ts
   import { provideStore } from '@ngrx/store';
   import { provideEffects } from '@ngrx/effects';
   import { provideStoreDevtools } from '@ngrx/store-devtools';
   import { provideRouterStore } from '@ngrx/router-store';

   bootstrapApplication(AppComponent, {
     providers: [
       provideRouter(routes),
       provideStore({ app: appReducer }),
       provideEffects([AppEffects]),
       provideStoreDevtools({ maxAge: 25, logOnly: environment.production }),
       provideRouterStore()
     ]
   });
   ```

Refer to NgRx docs: [https://ngrx.io/guide/store](https://ngrx.io/guide/store)

---

## 5. ESLint Configuration

At the repo root, create `eslint.config.js`:

```js
module.exports = {
  root: true,
  ignorePatterns: ['dist/', 'node_modules/'],
  overrides: [
    {
      files: ['*.ts'],
      parserOptions: {
        project: ['tsconfig.base.json', 'projects/*/tsconfig.json'],
        createDefaultProgram: true
      },
      extends: [
        'plugin:@angular-eslint/recommended',
        'plugin:@angular-eslint/template/process-inline-templates',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking'
      ],
      rules: {
        '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
        '@typescript-eslint/no-explicit-any': 'warn',
        'prefer-const': 'error',
        'indent': ['error', 2],
        'quotes': ['error', 'single', { avoidEscape: true }],
        'semi': ['error', 'always'],
        'max-len': ['warn', { code: 120 }]
      }
    },
    {
      files: ['*.html'],
      extends: ['plugin:@angular-eslint/template/recommended'],
      // optional accessibility rules:
      // 'plugin:@angular-eslint/template/accessibility'
      rules: {}
    }
  ]
};
```

Install ESLint and plugins:

```bash
npm install -D eslint \
  @angular-eslint/eslint-plugin \
  @angular-eslint/eslint-plugin-template \
  @typescript-eslint/parser \
  @typescript-eslint/eslint-plugin
```

---

## 6. Adding a New MFE

1. Generate a new remote app:

   ```bash
   ng generate application <name> \
     --standalone --routing --prefix=app-<name> --strict
   ```
2. Configure federation:

   ```bash
   ng add @angular-architects/native-federation \
     --project <name> --type remote --port <port> --remoteName <name>
   ```
3. Update the host’s federation config (federation.config.js) to include the new remote:

   ```js
   // in projects/host/federation.config.js
   remotes: {
     remote: 'http://localhost:4201/remoteEntry.json',
     '<name>': 'http://localhost:<port>/remoteEntry.json'
   }
   ```
4. Run both apps:

   ```bash
   ng serve <name>
   ng serve host
   ```

---

## Common Commands

| Command                                          | Description                            |
| ------------------------------------------------ | -------------------------------------- |
| npm install                                      | Install all dependencies               |
| ng serve host                                    | Serve the host application (port 4200) |
| ng serve remote                                  | Serve the default remote (port 4201)   |
| ng generate application <name> ...               | Scaffold a new standalone Angular app  |
| ng add @angular-architects/native-federation ... | Configure Plugin Federation for an app |
| npx eslint .                                     | Run lint across all projects           |
| npm run lint                                     | Alias for eslint .                     |
| npm run build host                               | Build the host for production          |
| npm run build remote                             | Build a remote for production          |
| npm test                                         | Run unit tests (if configured)         |

---

## Libraries & Documentation

| Library                               | Purpose                                 | Docs URL                                                                                                           
| ------------------------------------------------------------------------------------------------------------------ |
| @angular/cli                          | Angular CLI tools                       | [https://angular.io/cli](https://angular.io/cli)                                                                   |
| @angular-architects/native-federation | Module Federation plugin for Angular    | [https://github.com/angular-architects/module-federation](https://github.com/angular-architects/module-federation) |
| @ngrx/store, @ngrx/effects            | Reactive state management               | [https://ngrx.io/guide/store](https://ngrx.io/guide/store)                                                         |
| @ngrx/store-devtools                  | Redux devtools integration              | [https://ngrx.io/guide/store-devtools](https://ngrx.io/guide/store-devtools)                                       |
| @angular-eslint                       | ESLint plugin and parsers for Angular   | [https://github.com/angular-eslint/angular-eslint](https://github.com/angular-eslint/angular-eslint)               |
| @typescript-eslint                    | ESLint plugin and parser for TypeScript | [https://typescript-eslint.io/](https://typescript-eslint.io/)                                                     |


## Summary

This setup provides a scalable, maintainable, and consistent MFE architecture with:

* Shared dependencies & lazy-loaded remotes via Module Federation
* Modern Angular 19 standalone components
* NgRx-based state management without broken schematics
* A single, root ESLint config enforcing community standards
